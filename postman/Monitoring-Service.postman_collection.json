{
	"info": {
		"_postman_id": "66d6766c-80a1-4d6f-8484-4e99e3df7457",
		"name": "Monitoring-Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26113809"
	},
	"item": [
		{
			"name": "UserRequest",
			"item": [
				{
					"name": "Successful Registration Admin User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Registration was successful\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"User1\", \"password\": \"User1Password\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/register",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful Registration User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Registration was successful\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"User2\", \"password\": \"User2Password\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/register",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration with Existing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"A user with that name already exists\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"User1\", \"password\": \"User1Password\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/register",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration without Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Username or password cannot be null or empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"\", \"password\": \"testPassword\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/register",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration without Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Username or password cannot be null or empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"testUser\", \"password\": \"\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/register",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registration with Incorrect Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Username or password cannot be null or empty\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"testUser\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/register",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Login Tests",
			"item": [
				{
					"name": "Successful Login Admin User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"You are logged in\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"User1\", \"password\": \"User1Password\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful Login User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"You are logged in\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"User2\", \"password\": \"User2Password\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Invalid Username or Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Invalid username or password\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"invalidUser\", \"password\": \"testPassword\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login when Already Logged In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Invalid username or password\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"username\": \"testUser\", \"password\": \"testPassword\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/login",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Meter Readings Tests",
			"item": [
				{
					"name": "Add Readings User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Readings added\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer VXNlcjE6dHJ1ZQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"coldWater\": 10, \"hotWater\": 20, \"heating\": 30, \"month\": \"JANUARY\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/readings",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"readings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Readings User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Readings added\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer VXNlcjI6ZmFsc2U="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"coldWater\": 130, \"hotWater\": 20, \"heating\": 310, \"month\": \"MAY\"}"
						},
						"url": {
							"raw": "localhost:8080/meter/readings",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"readings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Readings with invalid body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Bad request. Please, check the entered data\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer VXNlcjE6dHJ1ZQ=="
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"coldWater\": 10, \"hotWater\": 20, \"heating\": 30, \"mont"
						},
						"url": {
							"raw": "localhost:8080/meter/readings",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"readings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Readings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has valid meter readings\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('coldWater');\r",
									"    pm.expect(jsonData).to.have.property('hotWater');\r",
									"    pm.expect(jsonData).to.have.property('heating');\r",
									"    pm.expect(jsonData).to.have.property('month');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer VXNlcjE6dHJ1ZQ=="
							}
						],
						"url": {
							"raw": "localhost:8080/meter/readings",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"readings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Readings for month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response has valid meter readings\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('coldWater');\r",
									"    pm.expect(jsonData).to.have.property('hotWater');\r",
									"    pm.expect(jsonData).to.have.property('heating');\r",
									"    pm.expect(jsonData).to.have.property('month');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer VXNlcjE6dHJ1ZQ=="
							}
						],
						"url": {
							"raw": "localhost:8080/meter/readings?month=january",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"readings"
							],
							"query": [
								{
									"key": "month",
									"value": "january"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Readings History",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(Array.isArray(pm.response.json())).to.be.true;\r",
									"});\r",
									"pm.test(\"Each item in response has valid meter readings\", function () {\r",
									"    pm.response.json().forEach(function(item) {\r",
									"        pm.expect(item).to.have.property('coldWater');\r",
									"        pm.expect(item).to.have.property('hotWater');\r",
									"        pm.expect(item).to.have.property('heating');\r",
									"        pm.expect(item).to.have.property('month');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer VXNlcjE6dHJ1ZQ=="
							}
						],
						"url": {
							"raw": "localhost:8080/meter/readings/history",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"readings",
								"history"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Current Readings Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an object\", function () {\r",
									"    pm.expect(typeof pm.response.json()).to.eql('object');\r",
									"});\r",
									"pm.test(\"Each item in response has valid meter readings\", function () {\r",
									"    Object.values(pm.response.json()).forEach(function(reading) {\r",
									"        pm.expect(reading).to.have.property('coldWater');\r",
									"        pm.expect(reading).to.have.property('hotWater');\r",
									"        pm.expect(reading).to.have.property('heating');\r",
									"        pm.expect(reading).to.have.property('month');\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer VXNlcjE6dHJ1ZQ=="
							}
						],
						"url": {
							"raw": "localhost:8080/meter/readings/all",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"readings",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Current Meter Readings not Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"Bad request. You don't have access rights\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer VXNlcjI6ZmFsc2U="
							}
						],
						"url": {
							"raw": "localhost:8080/meter/readings/all",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"readings",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Loguot Tests",
			"item": [
				{
					"name": "Logout whit invalid token",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Logout Successful",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"pm.expect(pm.response.text()).to.include(\"You are logged out\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "VXNlcjE6dHJ1ZQ==",
								"type": "text"
							}
						],
						"url": {
							"raw": "localhost:8080/meter/logout",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"meter",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}